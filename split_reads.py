#!/usr/bin/env python3
"""
Author : Ayodele Fakoya <eiwai@localhost>
Date   : 2023-06-14
Purpose: Fetch reads of homozygous and heterozygous samples
"""
import os
import re
import subprocess
import pandas as pd
import argparse
from typing import NamedTuple
from functools import partial


class Args(NamedTuple):
    """ Command-line arguments """
    input_tsv: str
    bam_file: str
    fastq_file: str
    region: str
    barcode_id: str
    out_dir: str


# --------------------------------------------------
def get_args() -> Args:
    """ Get command-line arguments """

    parser = argparse.ArgumentParser(
        description='Fetch reads of homozygous and heterozygous samples',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('input_tsv',
                        metavar='haplotag_tsv_file',
                        help='tsv containing haplotag information of reads')

    parser.add_argument('bam_file',
                        metavar='BAM',
                        help='haplotagged bamfile generated by whatshap')

    parser.add_argument('fastq_file',
                        metavar='FASTQ',
                        help='Sample fastq file')

    parser.add_argument('-r',
                        '--region',
                        help='target region',
                        metavar='region',
                        type=str,
                        default='none')

    parser.add_argument('-b',
                        '--barcode_id',
                        help='barcode identifier',
                        metavar='barcode',
                        type=str,
                        default='none')

    parser.add_argument('-o',
                        '--out_dir',
                        help='Output directory',
                        metavar='DIR',
                        type=str,
                        default='none')

    args = parser.parse_args()

    return Args(args.input_tsv, args.bam_file, args.fastq_file ,
                args.region, args.barcode_id, args.out_dir)


# --------------------------------------------------
def main() -> None:
    """ Make a jazz noise here """

    args = get_args()

    print(f'input_tsv: {args.input_tsv}')
    print(f'input_tsv: {args.bam_file}')
    print(f'barcode_id: {args.barcode_id}')
    print(f'region: {args.region}')

    col_list, elem_count = parse_tsv(args.input_tsv)
    
    # Case 1: HOM_REF
    if elem_count == 0:
        print(f'{args.input_tsv} is HOM_REF')

        # Path to haplotype assembly and haplotagged bams

        # 1. Extract read ids
        assert os.path.isfile(args.bam_file), 'BAM FILE NOT FOUND'
        print('bam_file:', os.path.basename(args.bam_file))

        samtools_cmd=f"""
        samtools view {args.bam_file} \
        | cut -f 1 \
        > {args.out_dir}/read_ids.txt \
        """.strip('\n').replace('    ','')
        subprocess.run(samtools_cmd, shell=True, check=True)

        # 2. Extract reads from fastq file with seqkit
        assert os.path.isfile(args.fastq_file), 'FASTQ FILE NOT FOUND'
        print('fastq_file:', os.path.basename(args.fastq_file))

        get_h1_fqs=f"""
        seqkit grep --pattern-file {args.out_dir}/read_ids.txt \
        {args.fastq_file} \
        > {args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz
        """.strip().replace('    ', '')
        subprocess.run(get_h1_fqs, shell=True, check=True)
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz')

        get_h2_fqs=f"""
        seqkit grep --pattern-file {args.out_dir}/read_ids.txt \
        {args.fastq_file} \
        > {args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz
        """.strip().replace('    ', '')
        subprocess.run(get_h2_fqs, shell=True, check=True)
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz')

        
    # Case 2 - HOM_ALT
    elif elem_count != 0 and ("H1" not in col_list) and ("H2" not in col_list) and ("none" in col_list):
        print(f'{args.input_tsv} is HOM_ALT')
        
        # 1. Extract read ids
        assert os.path.isfile(args.bam_file), 'BAM FILE NOT FOUND'
        print('bam_file:', os.path.basename(args.bam_file))

        samtools_cmd=f"""
        samtools view {args.bam_file} \
        | cut -f 1 \
        > {args.out_dir}/read_ids.txt \
        """.strip('\n').replace('    ','')
        subprocess.run(samtools_cmd, shell=True, check=True)

        # 2. Extract reads from fastq file with seqkit
        assert os.path.isfile(args.fastq_file), 'FASTQ FILE NOT FOUND'
        print('fastq_file:', os.path.basename(args.fastq_file))

        get_h1_fqs=f"""
        seqkit grep --pattern-file {args.out_dir}/read_ids.txt \
        {args.fastq_file} \
        > {args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz
        """.strip().replace('    ', '')
        subprocess.run(get_h1_fqs, shell=True, check=True)
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz')

        get_h2_fqs=f"""
        seqkit grep --pattern-file {args.out_dir}/read_ids.txt \
        {args.fastq_file} \
        > {args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz
        """.strip().replace('    ', '')
        subprocess.run(get_h2_fqs, shell=True, check=True)
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz')
    
    # Case 3: HET
    elif elem_count != 0 and ("H1" in col_list) or ("H2" in col_list):
        print(f'{args.input_tsv} is HET')
        
        # Extract reads from fastq file with whatshap
        assert os.path.isfile(args.fastq_file), 'FASTQ FILE NOT FOUND'
        print('fastq_file:', os.path.basename(args.fastq_file))

        whatshap_split_cmd=f"""
        whatshap split \
        --output-h1 {args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz \
        --output-h2 {args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz \
        {args.fastq_file} \
        {args.input_tsv} 
        """.strip('\n').replace('    ','')
        subprocess.run(whatshap_split_cmd, shell=True, check=True)
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h1.fastq.gz')
        assert os.path.isfile(f'{args.out_dir}/{args.barcode_id}.{args.region}.h2.fastq.gz')

# --------------------------------------------------
def parse_tsv(input_tsv: str):
    """ Parse TSV file"""
    df=pd.read_csv(input_tsv, sep='\t',
                dtype={"haplotype":"string",
                       "phaseset":"string",
                       "chromosome":"string"})
    
    col_list=list(df["haplotype"].drop_duplicates())
    
    elem_count=len(col_list)
    
    return col_list, elem_count

# --------------------------------------------------
if __name__ == '__main__':
    main()
